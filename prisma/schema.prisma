generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

model User {
  id          String   @id @default(uuid())
  handle      String   @unique
  displayName String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile   Profile?
  posts     Post[]
  followers Follow[]   @relation("UserFollowers")
  following Follow[]   @relation("UserFollowing")
  likes     PostLike[]
  sessions  Session[]
}

model Profile {
  id         String   @id @default(uuid())
  userId     String   @unique
  bio        String?
  avatarUrl  String?
  location   String?
  websiteUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id            String         @id @default(uuid())
  userId        String
  body          String         @db.Text
  replyToPostId String?
  visibility    PostVisibility @default(PUBLIC)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  author  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Post?      @relation("PostReplies", fields: [replyToPostId], references: [id])
  replies Post[]     @relation("PostReplies")
  likes   PostLike[]

  @@index([userId, createdAt])
  @@index([replyToPostId])
}

model Follow {
  followerId String
  followeeId String
  createdAt  DateTime @default(now())

  follower User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("UserFollowers", fields: [followeeId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@index([followeeId])
}

model PostLike {
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([postId])
}

model Session {
  id               String   @id @default(uuid())
  userId           String
  refreshTokenHash String
  expiresAt        DateTime
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
